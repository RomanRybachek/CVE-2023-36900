#ifndef UNICODE
#define UNICODE
#endif

#include <windows.h>
#include <wchar.h>
#include <iostream>
#include <clfsw32.h>
#include <Clfsmgmtw32.h>

#pragma comment(lib, "Clfsw32.lib")

void ErrorExit(const char* id)
{
    DWORD errNum = GetLastError();
    std::cerr << "Encountered unexpected error from " << id << ": " << std::endl
        << errNum << std::endl;
    exit(errNum);
}


int wmain(int argc, wchar_t* argv[])
{

	if (argc < 2) {
		std::cout << "An absoulte path to log is needed";
		exit(1);
	}

	std::wstring path(L"LOG:");
	path += argv[1];

	HANDLE logHndl = CreateLogFile(
		path.c_str(),
		GENERIC_READ | GENERIC_WRITE | DELETE,
		FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
		NULL,
		OPEN_ALWAYS,
		NULL);

	if (logHndl == INVALID_HANDLE_VALUE) {
		ErrorExit("Creating/opening log file error.");
	}
	else
	{
		std::wcout << L"Log " << path << L" is created/opened." << std::endl;
	}

	//CLFSUSER_API BOOL AddLogContainer(
	//  [in]                HANDLE     hLog,
	//  [in, optional]      PULONGLONG pcbContainer,
	//  [in]                LPWSTR     pwszContainerPath,
	//  [in, out, optional] LPVOID     pReserved
	//);
	//
	ULONGLONG pcbContainer = 0x10000;
	WCHAR container_name[] = L"log_files\\C1";
	if (AddLogContainer(logHndl, &pcbContainer, container_name, NULL) == 0) {
		ErrorExit("Something wrong with container creating.");
	}
	else {
		std::wcout << L"Container " << container_name << L" is created. Size:" << pcbContainer << std::endl;
	}

//	CLFSUSER_API BOOL CreateLogMarshallingArea(
//  [in]           HANDLE                  hLog,
//  [in, optional] CLFS_BLOCK_ALLOCATION   pfnAllocBuffer,
//  [in, optional] CLFS_BLOCK_DEALLOCATION pfnFreeBuffer,
//  [in, optional] PVOID                   pvBlockAllocContext,
//  [in]           ULONG                   cbMarshallingBuffer,
//  [in]           ULONG                   cMaxWriteBuffers,
//  [in]           ULONG                   cMaxReadBuffers,
//  [out]          PVOID                   *ppvMarshal
//);

	VOID *marshaling_context = NULL;

	void* p1 = NULL;
	void** p2 = NULL;
	p1 = marshaling_context;
	p2 = &marshaling_context;

	if (CreateLogMarshallingArea(	logHndl, 
									NULL, 
									NULL, 
									NULL, 
									0x1000, 
									1, 
									1, 
									p2
								) == 0) {
		ErrorExit("Marshalling area error (return value is NULL)");
	}
	else if (marshaling_context == NULL)
	{
		ErrorExit("Marshalling area error (return pointer is NULL)");
	}
	else {
		std::wcout << L"Marshalling area is created." << std::endl;
	}

    return 0;
}
