import zlib
import pwnlib.util.packing as pk
import sys
import copy

LOG_BLOCK_HDR_SIZE = 0x6c
SECTOR_SIZE = 0x200
RG_BLOCKS_START = 0xc0
RG_BLOCKS_END = 0x14f
SECTOR_SIGN = b'\x00\x00\x00\x00\x00\x00\x30\x01'
FIRST_SECTOR_SIGN = b'\x00\x00\x00\x00\x00\x00\x50\x01'

class RgBlock():
    def __init__(self, index):
        self.index = index
        self.size = 24

        self.rgBlocksArray = BLF_BUF[RG_BLOCKS_START:RG_BLOCKS_END]
        self.block = self.rgBlocksArray[index  * self.size : index * self.size  + self.size]

        self.pbImage = pk.u64(self.block[:8])
        self.cbImage = pk.u32(self.block[8:12])
        self.cbOffset = pk.u32(self.block[12:16])
        self.eBlockType = pk.u32(self.block[16:20])

    def GetBytes(self):
        return pk.p64(self.pbImage) + pk.p32(self.cbImage)+ pk.p32(self.cbOffset)+ pk.p32(self.eBlockType) + pk.p32(0)

    def update_blf(self, update_crc32_too=False):
        global BLF_BUF
        buf_before = BLF_BUF[:RG_BLOCKS_START + self.index * self.size]
        buf_after = BLF_BUF[RG_BLOCKS_START + self.index * self.size + self.size:]
        BLF_BUF = buf_before + self.GetBytes() + buf_after
        if update_crc32_too == True:
            block_0 = Block(0)
            block_0.update_crc32()

class LogBlockHdr:
    def __init__(self, index) -> None:
        self.rg_block = RgBlock(index)
        self.start = self.rg_block.cbOffset
        self.end = self.rg_block.cbOffset + LOG_BLOCK_HDR_SIZE
        self.log_block_hdr = BLF_BUF[self.start : self.end]

        self.MajorVersion = pk.u8(self.log_block_hdr[0:1])
        self.MinorVersion = pk.u8(self.log_block_hdr[1:2])
        self.Usn = pk.u8(self.log_block_hdr[2:3])
        self.ClientId = pk.u8(self.log_block_hdr[3:4])
        self.TotalSectorCount = pk.u16(self.log_block_hdr[4:6])
        self.ValidSectorCount = pk.u16(self.log_block_hdr[4:6])
        self.Padding = pk.u32(self.log_block_hdr[8:12])
        self.Checksum = pk.u32(self.log_block_hdr[12:16])
        self.Flags = pk.u32(self.log_block_hdr[16:20])
        self.CurrentLsn = pk.u64(self.log_block_hdr[24:32])
        self.NextLsn = pk.u64(self.log_block_hdr[32:40])
        self.RecordsOffsets = self.log_block_hdr[40 : 40 + 4 * 16]
        self.SignaturesOffset = pk.u32(self.log_block_hdr[40 + 4 * 16 : 40 + 4 * 16 + 4])
    
    def update_blf(self):
        global BLF_BUF
        before = BLF_BUF[:self.start]
        after = BLF_BUF[self.end:]
        self.log_block_hdr = pk.p8(self.MajorVersion) + \
                            pk.p8(self.MinorVersion) + \
                            pk.p8(self.Usn) + \
                            pk.p8(self.ClientId) + \
                            pk.p16(self.TotalSectorCount) + \
                            pk.p16(self.ValidSectorCount) + \
                            pk.p32(self.Padding) + \
                            pk.p32(self.Checksum) + \
                            pk.p32(self.Flags) + \
                            pk.p32(0) + \
                            pk.p64(self.CurrentLsn) + \
                            pk.p64(self.NextLsn) + \
                            self.RecordsOffsets + \
                            pk.p32(self.SignaturesOffset)
        print(hex(len(self.log_block_hdr)))
        BLF_BUF = before + self.log_block_hdr + after
        # print("1:", BLF_BUF[self.start: self.start + 0x20])


class Block:
    def __init__(self, index) -> None:
        self.index = index
        self.log_block_hdr = LogBlockHdr(index)
        self.rgBlock = self.log_block_hdr.rg_block

        self.start = self.rgBlock.cbOffset
        self.size = self.rgBlock.cbImage
        self.end = self.start + self.size
        self.sector_count = self.log_block_hdr.TotalSectorCount

        self.block = BLF_BUF[self.start:self.end]

    def update_crc32(self):
        before_sign = self.block[:0xc]
        after_sign = self.block[0x10:]

        buf_with_zeroed_checksum = before_sign + pk.p32(0) + after_sign
        crc32 = zlib.crc32(buf_with_zeroed_checksum)

        self.block = before_sign + pk.p32(crc32) + after_sign
        global BLF_BUF
        part_before_block = BLF_BUF[:self.start]
        part_after_block = BLF_BUF[self.end:]
        BLF_BUF = part_before_block + self.block + part_after_block
        print("CRC32 of block[", self.index, "]:", hex(crc32))
    
    def change_size_of_block5(self, new_size):
        global BLF_BUF

        if self.index != 5:
            print("error: only for 5 sector")
            return
        if new_size > 0xffffffff:
            print("error: too big")
            return

        block0 = Block(0)

        new_log_block_hdr = copy.deepcopy(block0.log_block_hdr)
        new_log_block_hdr.TotalSectorCount = new_size >> 9
        new_log_block_hdr.ValidSectorCount = new_size >> 9
        new_log_block_hdr.SignaturesOffset = new_size - 8
        new_log_block_hdr.rg_block = self.rgBlock
        new_log_block_hdr.start = self.log_block_hdr.start
        new_log_block_hdr.end = self.log_block_hdr.end

        self.log_block_hdr = new_log_block_hdr
        self.sector_count = new_log_block_hdr.TotalSectorCount

        self.log_block_hdr.update_blf()

        self.block = BLF_BUF[self.start:self.start + SECTOR_SIZE]
        self.size = new_size
        self.end = self.start + self.size
        self.rgBlock.cbImage = new_size

        self.block = self.block[:-8] + FIRST_SECTOR_SIGN

        for i in range(self.sector_count - 1):
            new_sector = b'\x00' * 0x1f8 + SECTOR_SIGN
            self.block += new_sector
        
        before = BLF_BUF[:self.start]
        BLF_BUF = before + self.block

        self.rgBlock.update_blf()
        self.update_crc32()
        block0 = Block(0)
        block0.update_crc32()

def create_new_file():
    global NEW_NAME
    fd_w = open(NEW_NAME, "wb")
    fd_w.write(BLF_BUF)
    print(NEW_NAME, " is created!")
    fd_w.close()

if len(sys.argv) < 2:
    print("\nUsage: python3 update_crc32.py path_to_blf\n")
    exit(1)

blf_path = sys.argv[1]
if blf_path.find(".blf") == -1:
    print("\nFile must have .blf extension.\n")
    exit(1)

fd = open(blf_path, "rb")
BLF_BUF = fd.read()
fd.close()
NEW_NAME = blf_path.replace(".blf", "_updated.blf")


if len(sys.argv) < 2:
    print("py update_crc32.py blf_path -flag block")
    print("example: py update_crc32.py payload.blf -crc32 0 5")
    print("example: py update_crc32.py payload.blf -size5 0x1000")
    exit(1)

if sys.argv[2] == "-crc":
    blocks_num = len(sys.argv) - 3
    for i in range(3, len(sys.argv)):
        block_index = int(sys.argv[i])
        block = Block(block_index)
        block.update_crc32()
    create_new_file()
    exit(0)
elif sys.argv[2] == "-size5":
    size = int(sys.argv[3], 16)
    block5 = Block(5)
    block5.change_size_of_block5(size)
    create_new_file()
    exit(0)