import os
import sys

CUR_DIR = "C:\\Users\\Bill\\Desktop\\clfs\\"
SHARED_FOLDER = "Z:\\"
LOG_FOLDER = "log_files\\"
LOG_NAME = "log1::s1"
LOG_FILE = "log1.blf"
# LOG_NAME = sys.argv[2]
FOLDER_FOR_COPY = "log_copy\\"
UTILS_FOLDER = "utils\\"

VM_LOG_PATH_ABSOLUTE = CUR_DIR + LOG_FOLDER + LOG_NAME
VM_LOG_PATH_RELATIVE = LOG_FOLDER + LOG_NAME
LOG_NAME_WITH_EXT = LOG_NAME + ".blf"
MOD_LOG_NAME = LOG_NAME + "_updated.blf"
HOST_LOGCOPY_FOLDER = SHARED_FOLDER + FOLDER_FOR_COPY
HOST_PAYLOAD = SHARED_FOLDER + "payload.blf"
HOST_PAYLOAD_UPDATED = SHARED_FOLDER + "payload_updated.blf"

UPDATE_CRC32_COMMAND = "py update_crc32.py "
UPDATE_CRC32_END = " -patch"

if len(sys.argv) < 2:
    print("Usage: python launch.py c|o|g|i|w")
    exit(1)

def update_and_copy(options):
    os.system("py update_crc32.py Z:\\log_copy\\log1.blf " + options)
    os.system("copy /Y Z:\\log_copy\\log1_updated.blf log_files\\log1.blf")


def create_log(log_name):
    os.system("rmdir /S /Q log_files")
    os.system("mkdir log_files")
    os.system("create_log_with_container.exe log_files\\" + log_name)

def create_stream(log_and_stream_name):
    os.system("create_stream.exe log_files\\" + log_and_stream_name)

def open_log(log_name):
    os.system("open_log.exe log_files\\" + log_name)

def get_log():
    os.system("rmdir /S /Q Z:\\log_copy")
    os.system("mkdir Z:\\log_copy")
    os.system("copy /Y log_files Z:\\log_copy")

def copy_utilities():
    os.system("copy /Y Z:\\log_copy\\create_log_with_container.exe ." )
    os.system("copy /Y Z:\\log_copy\\open_log.exe ." )
    os.system("copy /Y Z:\\log_copy\\update_crc32.py ." )

def patch():
    create_log("log1::s1")
    create_stream("log1::s2")
    get_log()
    update_and_copy("-patch")
    open_log("log1::s2")

if sys.argv[1].find("g") != -1: #get
    get_log()
if sys.argv[1].find("u") != -1: #utils
    copy_utilities()
if sys.argv[1].find("p") != -1: #utils
    patch()
